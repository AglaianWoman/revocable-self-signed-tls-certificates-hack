#!/usr/bin/env coffee

{ log } = require 'lightsaber'
fs = require 'fs'
bitcore = require 'bitcore'
Insight = require('bitcore-explorers').Insight
ClaimData = require './src/ClaimData.coffee'


class RevokeCert
  domainName: "www.mydomain.com"
  returnAddr: "mwmabpJVisvti3WEP5vhFRtn3yqHRD9KNP" # specifically for testnet faucet
  network: bitcore.Networks.testnet

  constructor: (dataFile)->
    @data = ClaimData.load(dataFile)
    @insight = new Insight 'https://test-insight.bitpay.com', @network
    @privateKey = @data.destinationPK

  unspentTxns: (callback)->
    address = @privateKey.toAddress(@network)
    @insight.getUnspentUtxos address, callback

  createTxn: (utxos)->
    total = utxos[0].satoshis
    fee = 10000

    new bitcore.Transaction()
      .from utxos[0]
      .to(@returnAddr, (total-fee))
      .sign(@privateKey)

  broadcastTxn: (txn, callback)->
    @insight.broadcast txn, callback

domainName = "www.mydomain.com"
rev = new RevokeCert("tmp/certs/#{domainName}.json")
log "Emptying claim address #{rev.data.destinationAddress()}"
rev.unspentTxns (error, utxos)->
  if error
    console.error error
  else
    if utxos.length == 0
      log "No unspent transactions (address already empty)."
    else
      txn = rev.createTxn(utxos)
      log "Broadcasting revocation transaction: #{txn.serialize()}"
      rev.broadcastTxn txn, (err, txnid)->
        if err
          console.error err
        else
          log "Transaction ID: #{txnid}"
